...%% Legal Disclaimer
...% NIST-developed software is provided by NIST as a public service. 
...% You may use, copy and distribute copies of the software in any medium,
...% provided that you keep intact this entire notice. You may improve,
...% modify and create derivative works of the software or any portion of
...% the software, and you may copy and distribute such modifications or
...% works. Modified works should carry a notice stating that you changed
...% the software and should note the date and nature of any such change.
...% Please explicitly acknowledge the National Institute of Standards and
...% Technology as the source of the software.
...% 
...% NIST-developed software is expressly provided "AS IS." NIST MAKES NO
...% WARRANTY OF ANY KIND, EXPRESS, IMPLIED, IN FACT OR ARISING BY
...% OPERATION OF LAW, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY
...% OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT
...% AND DATA ACCURACY. NIST NEITHER REPRESENTS NOR WARRANTS THAT THE
...% OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, OR
...% THAT ANY DEFECTS WILL BE CORRECTED. NIST DOES NOT WARRANT OR MAKE ANY 
...% REPRESENTATIONS REGARDING THE USE OF THE SOFTWARE OR THE RESULTS 
...% THEREOF, INCLUDING BUT NOT LIMITED TO THE CORRECTNESS, ACCURACY,
...% RELIABILITY, OR USEFULNESS OF THE SOFTWARE.
...% 
...% You are solely responsible for determining the appropriateness of
...% using and distributing the software and you assume all risks
...% associated with its use, including but not limited to the risks and
...% costs of program errors, compliance with applicable laws, damage to 
...% or loss of data, programs or equipment, and the unavailability or
...% interruption of operation. This software is not intended to be used in
...% any situation where a failure could cause risk of injury or damage to
...% property. The software developed by NIST employees is not subject to
...% copyright protection within the United States.
classdef dspFun
    %dspFun class combines common functions
    %   Detailed explanation goes here
    
    properties (Constant)
        % Fpass = 0.9;              % Passband Frequency
        % Fstop = 1.1;              % Stopband Frequency
        % Dpass = 0.057501127785;   % Passband Ripple
        % Dstop = 0.0031622776602;  % Stopband Attenuation
        % flag  = 'scale';          % Sampling Flag
        % Apass=1
        % Astop=50
        % 1MHz low pass 12.5MHz, 2MHz filt of Fs=25MHz complex
        NumeratorLPF8Percent=[8.13196437761482e-05 9.73169434769315e-05 ...
        0.000108312716549552 0.000112886074446983 0.000109948178794641 ...
        9.88600808042277e-05 7.95267719815486e-05 5.24581201307797e-05 ...
        1.87891781204993e-05 -1.97451220636764e-05 -6.08827848538715e-05 ...
        -0.000101953507591057 -0.000140038212465014 -0.000172160721121339 ...
        -0.000195499871630031 -0.000207607967197598 -0.000206619917613272 ...
        -0.000191436961134628 -0.000161869541979708 -0.000118725792977977 ...
        -6.38350742375111e-05 -5.23867725863396e-19 6.91248809993941e-05 ...
        0.000139224398878393 0.000205575424199087 0.000263347212734519 ...
        0.000307931403314363 0.000335280285420333 0.000342229917318698 ...
        0.000326784185776009 0.000288337085881818 0.000227813382514679 ...
        0.000147712291344923 5.20446647730398e-05 -5.38389462061872e-05 ...
        -0.000163524485895633 -0.000269902360601294 -0.000365607494412552 ...
        -0.000443505535461421 -0.000497194460578891 -0.000521487875848128 ...
        -0.000512845537380534 -0.000469718199413853 -0.00039277785892866 ...
        -0.000285010665512457 -0.000151657896184775 -1.38607464124831e-18 ...
        0.000161010788206389 0.000321253059447801 0.000470047673145843 ...
        0.000596842695857461 0.000691929493392539 0.000747143143785628 ...
        0.000756498809829669 0.000716717403830181 0.000627598847397141 ...
        0.000492209306671898 0.000316859577879863 0.000110864713154759 ...
        -0.000113910759194842 -0.000343702954537215 -0.000563660845618905 ...
        -0.000758774663135193 -0.000914864370505261 -0.00101956516332579 ...
        -0.00106324390744728 -0.00103978169107622 -0.000947163351535508 ...
        -0.000787824778950252 -0.000568722534321053 -0.000301107107486543 ...
        -7.45378120434836e-18 0.000316605417866065 0.000628779940009003 ...
        0.000915874418229624 0.00115784375185115 0.00133659655291482 ...
        0.00143728239352564 0.00144942846064598 0.00136784321796427 ...
        0.00119321618939175 0.000932359731495094 0.000598059778794513 ...
        0.000208526823256184 -0.00021353563892498 -0.000642201937605035 ...
        -0.0010498667262547 -0.00140897053529643 -0.00169380365600719 ...
        -0.0018822736834309 -0.00195751919528404 -0.0019092567869292 ...
        -0.00173476104099633 -0.00143939650481682 -0.00103664641071104 ...
        -0.000547613288497213 -1.40787089217869e-17 0.000573385984147263 ...
        0.00113652924638439 0.00165239870645195 0.00208530628891572 ...
        0.00240328618266537 0.00258034110935335 0.00259840386411089 ...
        0.00244887416358816 0.00213361218815221 0.00166530015638674 ...
        0.00106712024338601 0.000371739053842228 -0.000380366812586805 ...
        -0.00114316556959937 -0.0018677860725913 -0.00250554042777736 ...
        -0.0030110726779067 -0.00334543686185339 -0.00347890367005976 ...
        -0.00339330351766221 -0.00308373510409329 -0.00255950158604378 ...
        -0.00184417973853401 -0.00097477858320547 -1.1802380613285e-17 ...
        0.00102232854290563 0.00202852338776248 0.00295284043873969 ...
        0.00373158044551438 0.00430725787878728 0.00463257257599038 ...
        0.00467392420029549 0.00441422674818403 0.00385481344368964 ...
        0.00301626994693645 0.00193809350190262 0.000677144233618544 ...
        -0.000695071612594927 -0.00209617246241578 -0.00343754186574147 ...
        -0.004629592270148 -0.00558735629310196 -0.0062360761961553 ...
        -0.00651644745520861 -0.00638917779913133 -0.00583854930219661 ...
        -0.00487471727232797 -0.00353454375405587 -0.00188084229076512 ...
        -1.09905198260738e-17 0.00200196193123541 0.00400473296840847 ...
        0.00588021698014089 0.00749986992744382 0.00874248344738898 ...
        0.00950198352291189 0.00969479404260977 0.00926632095660206 ...
        0.00819614441996979 0.00650156278968316 0.00423921114176846 ...
        0.00150457427842553 -0.00157067499731161 -0.00482346315694874 ...
        -0.00806606008531738 -0.0110944975172994 -0.0136982775222247 ...
        -0.0156709033259502 -0.0168207046614976 -0.0169813970281881 ...
        -0.0160218111880033 -0.0138542567836951 -0.0104410412716594 ...
        -0.00579874988735534 -1.93124689296581e-17 0.00682749149342413 ...
        0.0145045526661484 0.0228067975836329 0.0314732118638612 ...
        0.0402167053119404 0.0487361467610883 0.056729312939672 ...
        0.0639061287176484 0.070001553680896 0.0747874811234146 ...
        0.078083059895079 0.0797629249395014 0.0797629249395014 ...
        0.078083059895079 0.0747874811234146 0.070001553680896 ...
        0.0639061287176484 0.056729312939672 0.0487361467610883 ...
        0.0402167053119404 0.0314732118638612 0.0228067975836329 ...
        0.0145045526661484 0.00682749149342413 -1.93124689296581e-17 ...
        -0.00579874988735534 -0.0104410412716594 -0.0138542567836951 ...
        -0.0160218111880033 -0.0169813970281881 -0.0168207046614976 ...
        -0.0156709033259502 -0.0136982775222247 -0.0110944975172994 ...
        -0.00806606008531738 -0.00482346315694874 -0.00157067499731161 ...
        0.00150457427842553 0.00423921114176846 0.00650156278968316 ...
        0.00819614441996979 0.00926632095660206 0.00969479404260977 ...
        0.00950198352291189 0.00874248344738898 0.00749986992744382 ...
        0.00588021698014089 0.00400473296840847 0.00200196193123541 ...
        -1.09905198260738e-17 -0.00188084229076512 -0.00353454375405587 ...
        -0.00487471727232797 -0.00583854930219661 -0.00638917779913133 ...
        -0.00651644745520861 -0.0062360761961553 -0.00558735629310196 ...
        -0.004629592270148 -0.00343754186574147 -0.00209617246241578 ...
        -0.000695071612594927 0.000677144233618544 0.00193809350190262 ...
        0.00301626994693645 0.00385481344368964 0.00441422674818403 ...
        0.00467392420029549 0.00463257257599038 0.00430725787878728 ...
        0.00373158044551438 0.00295284043873969 0.00202852338776248 ...
        0.00102232854290563 -1.1802380613285e-17 -0.00097477858320547 ...
        -0.00184417973853401 -0.00255950158604378 -0.00308373510409329 ...
        -0.00339330351766221 -0.00347890367005976 -0.00334543686185339 ...
        -0.0030110726779067 -0.00250554042777736 -0.0018677860725913 ...
        -0.00114316556959937 -0.000380366812586805 0.000371739053842228 ...
        0.00106712024338601 0.00166530015638674 0.00213361218815221 ...
        0.00244887416358816 0.00259840386411089 0.00258034110935335 ...
        0.00240328618266537 0.00208530628891572 0.00165239870645195 ...
        0.00113652924638439 0.000573385984147263 -1.40787089217869e-17 ...
        -0.000547613288497213 -0.00103664641071104 -0.00143939650481682 ...
        -0.00173476104099633 -0.0019092567869292 -0.00195751919528404 ...
        -0.0018822736834309 -0.00169380365600719 -0.00140897053529643 ...
        -0.0010498667262547 -0.000642201937605035 -0.00021353563892498 ...
        0.000208526823256184 0.000598059778794513 0.000932359731495094 ...
        0.00119321618939175 0.00136784321796427 0.00144942846064598 ...
        0.00143728239352564 0.00133659655291482 0.00115784375185115 ...
        0.000915874418229624 0.000628779940009003 0.000316605417866065 ...
        -7.45378120434836e-18 -0.000301107107486543 -0.000568722534321053 ...
        -0.000787824778950252 -0.000947163351535508 -0.00103978169107622 ...
        -0.00106324390744728 -0.00101956516332579 -0.000914864370505261 ...
        -0.000758774663135193 -0.000563660845618905 -0.000343702954537215 ...
        -0.000113910759194842 0.000110864713154759 0.000316859577879863 ...
        0.000492209306671898 0.000627598847397141 0.000716717403830181 ...
        0.000756498809829669 0.000747143143785628 0.000691929493392539 ...
        0.000596842695857461 0.000470047673145843 0.000321253059447801 ...
        0.000161010788206389 -1.38607464124831e-18 -0.000151657896184775 ...
        -0.000285010665512457 -0.00039277785892866 -0.000469718199413853 ...
        -0.000512845537380534 -0.000521487875848128 -0.000497194460578891 ...
        -0.000443505535461421 -0.000365607494412552 -0.000269902360601294 ...
        -0.000163524485895633 -5.38389462061872e-05 5.20446647730398e-05 ...
        0.000147712291344923 0.000227813382514679 0.000288337085881818 ...
        0.000326784185776009 0.000342229917318698 0.000335280285420333 ...
        0.000307931403314363 0.000263347212734519 0.000205575424199087 ...
        0.000139224398878393 6.91248809993941e-05 -5.23867725863396e-19 ...
        -6.38350742375111e-05 -0.000118725792977977 -0.000161869541979708 ...
        -0.000191436961134628 -0.000206619917613272 -0.000207607967197598 ...
        -0.000195499871630031 -0.000172160721121339 -0.000140038212465014 ...
        -0.000101953507591057 -6.08827848538715e-05 -1.97451220636764e-05 ...
        1.87891781204993e-05 5.24581201307797e-05 7.95267719815486e-05 ...
        9.88600808042277e-05 0.000109948178794641 0.000112886074446983 ...
        0.000108312716549552 9.73169434769315e-05 8.13196437761482e-05];
    end
    
    methods (Access = public, Static = true)
        function p1= bandPowerC(sig,Fs,freq_range )
            %Band power for complex signal sig centered at zero
            %   compute power in freq_range
            % minimal similar to bandpower()
            %             if isrow(sig)
            %                 sig=sig.';
            %             end
            sig=sig(:);
            N=length(sig);
            F=((-N/2:N/2-1)*(Fs/N)).';
            if freq_range(1)>=freq_range(2)
                ME = MException('dspFunbandPowerC:invalidFreqRange', ...
                    'Frequency range [ %f %f ] must be incremental',freq_range(1),freq_range(2));
                throw(ME);
            elseif freq_range(1)<F(1) || freq_range(2)>F(end)
                ME = MException('dspFunbandPowerC:invalidFreqRange', ...
                    'Frequency range must be in range of [ %f %f ]',F(1),F(end));
                throw(ME);
            end

            Xf=fftshift(fft(sig));
            
            ind1=find(F<=freq_range(1), 1, 'last' );
            ind2=find(F>=freq_range(2), 1, 'first');
            p1=sum(abs(Xf(ind1:ind2)).^2/N^2);
        end
        
%         function p1=bandPowerfiltC(sig,Fs,fcenter)
%             persistent Hd;
%             persistent FsOrig;
%             persistent fcenterOrig;
%             if isempty(Hd) || FsOrig~=Fs || fcenterOrig~=fcenter
%                  FsOrig=Fs;
%                  fcenterOrig=fcenter;
%                 Hd = dsp.FIRFilter( 'Numerator',dspFun.NumeratorLPF8Percent);
%             end
%             % always reset initial condition for power meas.
%             Hd.InitialConditions=0;
%             t=1/Fs*(0:(length(Hd.NumeratorLPF8Percent)-1));
%             Hd.NumeratorLPF8Percent=Hd.NumeratorLPF8Percent.*exp(1i*2*pi*fcenter*t);
%             sigout=Hd(sig);
%             p1=1/length(sigout)*sum(abs(sigout).^2);
%         end

        function p1=bandPowerfiltC(sig,Fs,freqRange)
            fcenter=(freqRange(1)+freqRange(2))/2;
            t=1/Fs*(0:(length(dspFun.NumeratorLPF8Percent)-1));
            Hd = dsp.FIRFilter( 'Numerator',dspFun.NumeratorLPF8Percent.*exp(1i*2*pi*fcenter*t));
            % always reset initial condition for power meas.
            sigout=Hd(sig);
            p1=1/length(sigout)*sum(abs(sigout).^2);
        end
        
        function [ sigOut,adjNumerator ] = bandPassFiltShift(sig,Fs,fcenter)
            t=1/Fs*(0:(length(dspFun.NumeratorLPF8Percent)-1));
            adjNumerator=dspFun.NumeratorLPF8Percent.*exp(1i*2*pi*fcenter*t);
            Hd = dsp.FIRFilter( 'Numerator',adjNumerator);
            % always reset initial condition for power meas.
            sigOut=Hd(sig);
        end
        
        function [sigOut,filtSpec]=resampleFilt(sigIn,old_Fs,new_Fs,RESET,filtSpec)
            %Resample with presistent system object dsp.FIRRateConverter
            % Performs sampling rate conversion by a rational factors [p,q] 
            % calculated from input (old_Fs,new_Fs) on a vector or matrix input.
            % It uses FIR rate convertor cascades an interpolator with a decimator. 
            % The interpolator upsamples the input by the upsampling factor,
            % p, followed by a lowpass FIR filter. The FIR filter acts both as 
            % an anti-imaging filter and an anti-aliasing filter prior to decimation. 
            % The decimator downsamples the output of upsampling and FIR filtering by the downsampling factor q.
            % [sigOut,filtSpec]=resampleFilt(sigIn,old_Fs,new_Fs,RESET,filtSpec)
            % sigIn: Signal input 
            % old_Fs: old sampling rate
            % new_Fs: new sampling rate 
            % RESET: boolean, true will overwrite the system object in the
            % momory if it exists 
            % filtSpec is struct with fields either (Fpass, Fstop, Dpass, Dstop)
            % or filtCoef. If filtCoef exists other fields will be ignored
            % Fpass:  Passband Frequency
            % Fstop:  Stopband Frequency
            % Dpass:  Passband Ripple
            % Dstop:  Stopband Attenuation
            % filtCoef: filter coefficients
            if nargin<4
                RESET=false;
            end
            [p,q] = rat(new_Fs / old_Fs);
            
            persistent hFirRate;
            
            if isempty(hFirRate)||RESET
                
                Fs = max(old_Fs,new_Fs);  % Sampling Frequency
                if nargin<5
                    transBwPer=0.2;
                    fc=min(old_Fs,new_Fs)/2; %cut off freq
                    ft=transBwPer*fc;
                    filtSpec.Fpass = fc-ft/2;            % Passband Frequency
                    filtSpec.Fstop = fc+ft/2;           % Stopband Frequency
                    %filtSpec.Dpass = 0.057501127785;  % Passband Ripple
                    %filtSpec.Dstop = 0.0001;          % Stopband Attenuation
                    filtSpec.Dpass = 0.1;  % Passband Ripple
                    filtSpec.Dstop = 0.001;          % Stopband Attenuation
                end
                if ~isfield(filtSpec,'filtCoef')
                    % Filter Coef will be used if they exists otherwise use the
                    % filter below
                    flag  = 'scale';         % Sampling Flag
                    %flag  = 'noscale';         % Sampling Flag
                    % Calculate the order from the parameters using FIRPMORD.
                    [N,Wn,BETA,TYPE] = kaiserord([filtSpec.Fpass filtSpec.Fstop]/(Fs/2), [1 0], [filtSpec.Dstop filtSpec.Dpass]);
                    
                    % Calculate the coefficients using the FIR1 function.
                    b  = fir1(N, Wn, TYPE, kaiser(N+1, BETA), flag);
                    filtSpec.filtCoef=b;
                else
                    b=filtSpec.filtCoef;
                end
                %normalize
                b = p*b/sum(b);
                %Hd = dsp.FIRFilter( 'Numerator', b);
                hFirRate = dsp.FIRRateConverter('InterpolationFactor',p,'DecimationFactor',q,'Numerator',b);
            end
            
            sigOut = hFirRate(sigIn);
            
        end
        

        
    end
    
end

